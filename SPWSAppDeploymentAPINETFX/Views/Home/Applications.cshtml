@*<div id="area" style="height:200px;background:silver;" ondrop="drop(event)" ondragover="dragover(event)">
        <input type="file" multiple />
    </div>*@
<style>
    button {
        width: 100%;
        text-align: left;
    }
</style>
<div class="container-fluid" style="max-height:80vh; height:80vh;">
    <div class="row">
        <div class="col-md-3">
            <div class="container-fluid">
                <div class="col-md">
                    <h2>Servers</h2>
                    <div style="max-height:8vh;overflow-x:auto;">

                        <!-- ko foreach: Servers-->
                        <div>
                            <button data-bind="
                    text:ServerName,
                    click: SelectServer" style="text-overflow:ellipsis;" class="btn btn-primary"></button>
                        </div>
                        <!-- /ko-->
                    </div>

                    <h2>Apps</h2>
                    <div style="max-height:28vh; overflow-x:hidden; overflow-y: auto">

                        <!-- ko foreach: Apps-->
                        <div>
                            <button data-bind="
                    text:AppName,
                    click: SelectApp" style="text-overflow:ellipsis;" class="btn btn-primary"></button>
                        </div>
                        <!-- /ko-->
                    </div>
                    <h2>Version</h2>

                    <div style="max-height:28vh; overflow-x:hidden; overflow-y: auto">

                        <!-- ko foreach: Versions-->
                        <div>
                            <button data-bind="
                    text: AppVersionName,
                    click: SelectVersion" style="text-overflow:ellipsis;" class="btn btn-primary"></button>
                        </div>
                        <!-- /ko -->
                    </div>
                </div>

            </div>

        </div>

        <div class="col-md-7 container">

            <h2>Files</h2>
            <div class="row">
                <div class="col-md-1">
                    <input type="checkbox" />
                </div>
                <div class="col-md-11">
                    FileName
                </div>

            </div>
            <div style="max-height:78vh;height:78vh;overflow-y:auto;">


                <!-- ko foreach: ProcessedFiles-->
                <div class="row" data-bind="template: { name : 'fileTemplate' , data: $data}">

                </div>

                <!-- /ko -->
            </div>
        </div>
        <div class="col-md-2">

            <div>
                <h2>Controls</h2>
            </div>
            <div>
                <p data-bind="text:$root.Selected"></p>
            </div>
            <div>
                <h4>Multi-Selected Files</h4>
                <p data-bind="text: $root.MultiSelectFilesText"></p>
            </div>
            <div>
                <button data-bind="click: $root.DeleteMultiSelectFiles" class="btn btn-danger">Delete Selected</button>
                <button data-bind="click: $root.ClientUpdate" class="btn btn-success">Client Update</button>
            </div>
            <!-- ko if: Selected() == "Server" -->
            <div>
                <h5 class="col-md-4">Server:</h5><h5 class="col-md-8" data-bind="text:SelectedServer().ServerName"></h5>
            </div>
            <div>
                <p class="col-md-4">Apps: </p><p class="col-md-8" data-bind="text:Apps().length"></p>
            </div>

            <div>
                <h4>Add App</h4>

                <div class="form-group">
                    <label for="AAppserverName">Server Name:</label>
                    <input type="text" data-bind="value: $root.FormAddApp().ServerName" name="AAppserverName" id="AAppserverName" class="form-control" readonly />
                </div>
                <div class="form-group">
                    <label for="AAppappName">App Name:</label>
                    <input type="text" data-bind="value: $root.FormAddApp().AppName" name="AAppappName" id="AAppappName" class="form-control" />
                </div>
                <input type="submit" class="btn btn-success" data-bind="click: $root.FormAddApp().AddApp" />

            </div>
            <!-- /ko -->
            <!-- ko if: Selected() == "App"-->
            <div>
                <h5 class="col-md-4">Server:</h5><h5 class="col-md-8" data-bind="text:SelectedServer().ServerName"></h5>
            </div>
            <div>
                <p class="col-md-4">App: </p><p class="col-md-8" data-bind="text:SelectedApp().AppName"></p>
            </div>

            <button data-bind="click: SelectedApp().DeleteApp" class="btn btn-danger">Delete</button>
            <p>Versions: </p>
            <div>
                <h4>Add Version</h4>
                <div class="form-group">
                    <label for="AVerserverName">Server:</label>
                    <input type="text" data-bind="value: $root.FormAddVersion().ServerName" name="AVerserverName" id="AVerserverName" class="form-control" readonly />
                </div>
                <div class="form-group">
                    <label for="AVerappName">App:</label>
                    <input type="text" data-bind="value: $root.FormAddVersion().AppName" name="AVerappName" id="AVerappName" class="form-control" readonly />
                </div>
                <div class="form-group">
                    <label for="AVerappVersionName">Version:</label>
                    <input type="text" data-bind="value: $root.FormAddVersion().AppVersionName" name="AVerappVersionName" id="AVerappVersionName" class="form-control" />
                </div>
                <div class="form-group">
                    <label for="AVisMajorRevision">
                        <input type="checkbox" data-bind="checked: $root.FormAddVersion().isMajorRevision" />
                        is Major Revision
                    </label>
                </div>
                <input type="submit" data-bind="click:$root.FormAddVersion().AddVersion" class="btn btn-success" />

            </div>
            <button>Add</button>
            <!-- /ko -->
            <!-- ko if: Selected() == "Version"-->

            <div>
                <h5 class="col-md-4">Server:</h5><h5 class="col-md-8" data-bind="text:SelectedServer().ServerName"></h5>
            </div>
            <div>
                <p class="col-md-4">App: </p><p class="col-md-8" data-bind="text:SelectedApp().AppName"></p>
            </div>
            <div>
                <p class="col-md-4">Version: </p><p class="col-md-8" data-bind="text:SelectedVersion().AppVersionName"></p>
            </div>

            <button data-bind="click: SelectedVersion().DeleteVersion" class="btn btn-danger">Delete</button>

            <!-- /ko -->
            <!-- ko if: Selected() == "File"-->
            <div>
                <p class="col-md-4">Server:</p><p class="col-md-8" data-bind="text:SelectedServer().ServerName"></p>
            </div>
            <div>
                <p class="col-md-4">App: </p><p class="col-md-8" data-bind="text:SelectedApp().AppName"></p>
            </div>
            <div>
                <p class="col-md-4">Version: </p><p class="col-md-8" data-bind="text:SelectedVersion().AppVersionName"></p>
            </div>
            <div>
                <p class="col-md-4">Name: </p>
                <!--ko if: SelectedFile() != null-->
                <p class="col-md-8" data-bind="text:SelectedFile().AppFileName"></p>
                <!-- /ko-->
                <!--ko if: SelectedFile() == null-->
                <p class="col-md-8"></p>
                <!-- /ko -->
            </div>
            <div>
                <p class="col-md-4">IsFolder: </p>
                <!--ko if: SelectedFile() != null-->
                <p class="col-md-8" data-bind="text:SelectedFile().isFolder"></p>
                <!-- /ko-->
                <!--ko if: SelectedFile() == null-->
                <p class="col-md-8"></p>
                <!-- /ko -->
            </div>
            <button class="btn btn-danger">Delete</button>
            <!-- ko if: SelectedFile() != null-->
            <!-- ko if: SelectedFile().isFolder -->
            <div>
                <h4>Create New Directory</h4>
                <div class="form-group">
                    <label for="cndDirectoryName">Name</label>
                    <input type="text" data-bind="value: $root.NewDirectory" id="cndDirectoryName" name="cndDirectoryName" class="form-control" />
                </div>
                <button data-bind="click: SelectedFile().CreateDirectory" class="btn btn-success">Create</button>
            </div>


            <div>
                <h4>Upload Files</h4>
                <button data-bind="click: SelectedFile().SelectFiles" class="btn btn-success">Upload Files...</button>
                <div>
                    <div class="col-sm-4">
                        <p>Name</p>
                    </div>
                    <div class="col-sm-4">
                        <p>Size</p>
                    </div>
                    <div class="col-sm-4">
                        <p>Actions</p>
                    </div>
                </div>
                <div data-bind="foreach: $root.ForUploadFilesVM">
                    <div class="row">
                        <div class="col-sm-4">
                            <p data-bind="text: FileName"></p>
                        </div>
                        <div class="col-sm-4">
                            <p data-bind="text: FileSize"></p>
                        </div>
                        <div class="col-sm-4">
                            <button data-bind="click:Delete" class="btn btn-danger">remove</button>
                        </div>
                    </div>
                    
                </div>
                <button data-bind="click: SelectedFile().UploadFile" class="btn btn-success">Upload</button>
            </div>
            <!-- /ko -->
            <!-- /ko -->
            <!-- /ko -->



        </div>
    </div>

</div>



@section headerScripts
{
    <script id="fileTemplate" type="text/html">

        <div class="col-md-1">
            <input type="checkbox" data-bind="checkedValue: $data, checked: $root.SelectedFiles" />
        </div>
        <div class="col-md-11">
            <i data-bind="class: fileClass"></i>
            <button class="col-md-10 btn" data-bind="text:AppFileName, click: activity" style="text-align:left;" >
            </button>

        </div>

        <div data-bind="visible: isVisible">
            <!-- ko template: { name: 'fileTemplate', foreach: Children } -->
            <!-- /ko -->
        </div>
    </script>
    <!--<script id="formTemplate" type="text/html">
        <form>-->
    <!-- ko if : FormTemplate == "AddApp" -->
    <!--<div class="form-group">
        <label for="serverName" />
        <input type="text" data-bind="value: FormAddApp().ServerName" readonly />
    </div>-->
    <!-- /ko -->
    <!--</form>
    </script>-->
    <script>
        var viewModel;
        function drop(e) {
            console.log(e);
            e.preventDefault();
            if (e.dataTransfer.items) {
                for (var i = 0; i < e.dataTransfer.items.length; i++) {
                    if (e.dataTransfer.items[i].kind === 'file') {
                        var file = e.dataTransfer.items[i].getAsFile();
                        console.log('... file[' + i + '].name = ' + file.name);
                    }
                }
            }
            else {
                // Use DataTransfer interface to access the file(s)
                for (var i = 0; i < ev.dataTransfer.files.length; i++) {
                    console.log('... file[' + i + '].name = ' + ev.dataTransfer.files[i].name);
                }

            }
        }

        function dragover(e) {
            //console.log(e);
            e.preventDefault();
        }

        async function ProcessChildren(parent, AppFileId) {
            var files = ko.utils.arrayFilter(viewModel.AppFiles(), function (af) {
                return af.parentFolder() == AppFileId && af.isFolder() == false;
            });
            var folders =
                ko.utils.arrayFilter(viewModel.AppFiles(), function (af) {
                    return af.parentFolder() == AppFileId && af.isFolder() == true;
                });
            if (folders.length > 0) {
                for (var i = 0; i < folders.length; i++) {
                    var folder = folders[i];
                    await ProcessChildren(folder, folder.AppFileId());
                    parent.Children.push(folder);

                }
            }
            if (files.length > 0) {

                for (var i = 0; i < files.length; i++) {
                    var file = files[i];
                    file.isVisible(false);
                    parent.Children.push(file);
                }
            }
        }


        async function ProcessFiles(AppFileId) {
            var files = ko.utils.arrayFilter(viewModel.AppFiles(), function (af) {
                return af.parentFolder() == AppFileId && af.isFolder() == false;
            });
            var folders =
                ko.utils.arrayFilter(viewModel.AppFiles(), function (af) {
                    return af.parentFolder() == AppFileId && af.isFolder() == true;
                });
            var parent = ko.utils.arrayFirst(viewModel.ProcessedFiles(), function (af) {
                return af.AppFileId() == AppFileId;
            });
            if (typeof parent != "undefined") {
                if (folders.length > 0) {
                    for (var i = 0; i < folders.length; i++) {
                        var folder = folders[i];
                        await ProcessChildren(folder, folder.AppFileId());
                        parent.Children.push(folder);

                    }
                }
                if (files.length > 0) {

                    for (var i = 0; i < files.length; i++) {
                        var file = files[i];
                        parent.Children.push(file);
                    }
                }
            }
        }

        function GetFiles(ServerName, AppId, AppVersionId) {
            $.ajax(getAppFilesUrl + "/" + ServerName + "/" + AppId + "/" + AppVersionId,
                {
                    method: "GET",
                    dataType: "application/json",
                    statusCode: {
                        200: function (data) {
                            console.log(data);
                            var processedText = data.responseText.replaceAll('""', '"');
                            var parsedData = JSON.parse(processedText);
                            parsedData = JSON.parse(parsedData);
                            var processedData = JSON.parse(parsedData.Data);
                            if (parsedData.Status == "Ok!") {
                                viewModel.AppFiles([]);

                                for (var i = 0; i < processedData.length; i++) {
                                    var instance = processedData[i];
                                    viewModel.AppFiles.push(new AppFile(instance.AppFileId, instance.AppVersionId, instance.AppFileName, instance.AppFileSize, instance.AppFileExt, instance.isFolder, instance.parentFolder, instance.LastWriteTime));
                                }
                                viewModel.ProcessedFiles([]);
                                viewModel.ProcessedFiles.push(new AppFile(0, viewModel.SelectedVersion().AppVersionId(), viewModel.SelectedVersion().AppVersionName(), "0", "", true, 0, ""));
                                ProcessFiles(0);
                            }
                            else {
                                alertify.notify(parsedData.Data);
                            }

                        }
                    }
                });
        }

        function GetVersions(ServerName, AppId) {
            $.ajax(getAppVersionUrl + "/" + ServerName + "/" + AppId,
                {
                    method: "GET",
                    dataType: "application/json",
                    statusCode: {
                        200: function (data) {
                            console.log(data);
                            var processedText = data.responseText.replaceAll('""', '"');
                            var parsedData = JSON.parse(processedText);
                            parsedData = JSON.parse(parsedData);
                            var processedData = JSON.parse(parsedData.Data);
                            if (parsedData.Status == "Ok!") {
                                viewModel.Versions([]);
                                viewModel.SelectedVersion = ko.observable();
                                viewModel.AppFiles([]);
                                viewModel.ProcessedFiles([]);

                                for (var i = 0; i < processedData.length; i++) {
                                    var instance = processedData[i];
                                    viewModel.Versions.push(new Version(instance.AppVersionId, instance.AppId, instance.AppVersionName, instance.isMajorRevision, instance.Date));
                                }
                            }
                            else {
                                alertify.notify(parsedData.Data);
                            }


                        }
                    }

                })
        }

        function GetApps(ServerName) {
            $.ajax(getAppsUrl + "/" + ServerName,
                {
                    method: "GET",
                    dataType: "application/json",
                    statusCode: {
                        200: function (data) {
                            console.log(data);
                            var processedText = data.responseText.replaceAll('""', '"');
                            var parsedData = JSON.parse(processedText);
                            parsedData = JSON.parse(parsedData);
                            var processedData = JSON.parse(parsedData.Data);
                            if (parsedData.Status == "Ok!") {
                                viewModel.Apps([]);
                                viewModel.SelectedApp = ko.observable();
                                viewModel.Versions([]);
                                viewModel.SelectedVersion = ko.observable();
                                viewModel.AppFiles([]);
                                viewModel.ProcessedFiles([]);
                                //viewModel.SelectedFiles =


                                for (var i = 0; i < processedData.length; i++) {
                                    var instance = processedData[i]
                                    viewModel.Apps.push(new App(instance.AppId, instance.AppName));
                                }
                            }
                            else {
                                alertify.notify(parsedData.Data);
                            }

                        }
                    }
                });
        }

        function GetServers() {
            $.ajax(getAppServersUrl,
                {
                    method: "GET",
                    dataType: "application/json",
                    statusCode: {
                        200: function (data) {
                            console.log(data);
                            viewModel.Servers([]);
                            var processedText = data.responseText.replaceAll('""', '"');
                            var parsedData = JSON.parse(processedText);
                            parsedData = JSON.parse(parsedData);
                            var processedData = JSON.parse(parsedData.Data);
                            if (parsedData.Status == "Ok!") {
                                for (var i = 0; i < processedData.length; i++) {
                                    var instance = processedData[i];
                                    viewModel.Servers.push(new Server(instance.IPAddress, instance.ServerName));
                                }
                            }
                            else {
                                alertify.notify(parsedData.Data);
                            }

                        }
                    }
                });
        }

        function FormAddApp(ServerName, AppName) {
            var self = this;
            self.ServerName = ko.observable(ServerName);
            self.AppName = ko.observable(AppName)
            self.AddApp = function () {

                var match = viewModel.Apps().length == 0 ? ko.observableArray([]) : ko.utils.arrayFilter(viewModel.Apps(), function (aa) {
                    return aa.AppName() == self.AppName();
                });
                if (match.length > 0) {
                    alertify.error("App already exists");
                    self.AppName('');
                }
                else {
                    alertify.confirm('Create App', "Are you sure you want to create this app?",
                        function () {
                            $.ajax(createAppsUrl + "/" + self.ServerName() + "/" + self.AppName(),
                                {
                                    method: "GET",
                                    dataType: "application/json",
                                    statusCode:
                                    {
                                        200: function (data) {
                                            console.log(data);
                                            var processedText = data.responseText.replaceAll('""', '"');
                                            var parsedData = JSON.parse(processedText);
                                            parsedData = JSON.parse(parsedData);
                                            //var processedData = JSON.parse(parsedData.Data);
                                            if (parsedData.Status == "Ok!") {
                                                alertify.success("New Application Created! : " + self.AppName());
                                                GetApps(viewModel.SelectedServer().ServerName())
                                            }
                                            else {
                                                alertify.error(parsedData);
                                            }
                                        }
                                    }
                                });
                        },
                        function () {
                            alertify.error("App creation cancelled!")
                        }
                    )

                }

            }
        }

        function FormAddVersion(ServerName, AppName, AppVersionName, isMajorRevision) {
            var self = this;
            self.ServerName = ko.observable(ServerName);
            self.AppName = ko.observable(AppName);
            self.AppVersionName = ko.observable(AppVersionName);
            self.isMajorRevision = ko.observable(isMajorRevision)
            self.AddVersion = function () {
                var match = viewModel.Versions().length == 0 ? ko.observable([]) :  ko.utils.arrayFilter(viewModel.Versions(), function (av) {
                    return av.AppVersionName() == self.AppVersionName();
                });
                if (match.length > 0) {
                    alertify.error("Version already exists!");
                }
                else {
                    alertify.confirm("Add Version", "Are you sure you want to add this version? " + self.AppVersionName(),
                        function () {
                            $.ajax(createAppVersionUrl + "/" + self.ServerName() + "/" + self.AppName() + "/" + self.AppVersionName() + "/" + self.isMajorRevision(),
                                {
                                    method: "GET",
                                    dataType: "application/json",
                                    statusCode: {
                                        200: function (data) {
                                            console.log(data);
                                            var processedText = data.responseText.replaceAll('""', '"');
                                            var parsedData = JSON.parse(processedText);
                                            parsedData = JSON.parse(parsedData);
                                            if (parsedData.Status == "Ok!") {
                                                alertify.success("New version created! " + self.AppVersionName());
                                                GetVersions(self.ServerName(), viewModel.SelectedApp().AppId());
                                            }
                                            else {
                                                alertify.error(parsedData.Data);
                                            }
                                        }
                                    }

                                })
                        },
                        function () {
                            alertify.error("Add Version cancelled!");
                        });
                }
            }
        }

        function InputFile(FileName,FileSize,File,EventTarget) {
            var self = this;
            self.FileName = ko.observable(FileName);
            self.FileSize = ko.observable(FileSize);
            self.File = ko.observable(File);
            self.EventTarget = ko.observable(EventTarget);
            self.Delete = function () {
                console.log(self.EventTarget().files);
                viewModel.ForUploadFilesVM.remove(self);
            }
        }

        function AppFile(AppFileId, AppVersionId, AppFileName, AppFileSize, AppFileExt, isFolder, parentFolder, LastWriteTime) {
            var self = this;
            self.AppFileId = ko.observable(AppFileId);
            self.AppVersionId = ko.observable(AppVersionId);
            self.AppFileName = ko.observable(AppFileName);
            self.AppFileSize = ko.observable(AppFileSize);
            self.AppFileExt = ko.observable(AppFileExt);
            self.isFolder = ko.observable(isFolder);
            self.parentFolder = ko.observable(parentFolder);
            self.LastWriteTime = ko.observable(LastWriteTime);
            self.isVisible = ko.observable(false);
            self.activity = function () {
                viewModel.Selected("File");
                viewModel.SelectedFile(self);
                if (self.isFolder()) {
                    if (self.isVisible()) {
                        self.isVisible(false);
                    }
                    else {
                        self.isVisible(true);
                    }
                }

            }
            self.CreateDirectory = function () {
                var match = self.Children.length == 0 ? ko.observable([]) : ko.utils.arrayFilter(self.Children(), function (cd) {
                    return cd.AppFileName() == viewModel.NewDirectory() && cd.isFolder() == true;
                });
                if (match.length == 0) {
                    alertify.confirm("Create Directory", "Are you sure you want to Create Directory? " + viewModel.NewDirectory(),
                        function () {
                            $.ajax(createDirectoryUrl + "/" + viewModel.SelectedServer().ServerName() + "/" + viewModel.SelectedApp().AppId() + "/" + viewModel.SelectedVersion().AppVersionId() + "/" + viewModel.SelectedFile().AppFileId()+"/"+viewModel.NewDirectory(),
                                {
                                    method: "GET",
                                    dataType: "application/json",
                                    statusCode: {
                                        200: function (data) {
                                            console.log(data);
                                            var processedText = data.responseText.replaceAll('""', '"');
                                            var parsedData = JSON.parse(processedText);
                                            parsedData = JSON.parse(parsedData);
                                            if (parsedData.Status == "Ok!") {
                                                alertify.success("Creating directory success!" + self.AppFileName());
                                                viewModel.SelectedVersion().SelectVersion();

                                            }
                                            else {
                                                alertify.error(parsedData.Data);
                                            }
                                        }
                                    }

                                });
                        },
                        function () {
                            alertify.error("Create Directory cancelled!");
                        });
                 
                }
                else {
                    alertify.error("Directory already exists")
                }
                
            }
            self.Children = ko.observableArray();
            self.fileClass = ko.computed(function () {
                return self.isFolder() ? "col-md-2 fas fa-folder " : "col-md-2 fa fa-file ";
            });
            self.SelectFiles = function (elem, event) {
                event.preventDefault();
                var fileInput = document.createElement('input');
                fileInput.setAttribute('type', 'file');
                fileInput.setAttribute('multiple','');
                fileInput.click();
                fileInput.addEventListener("change", function (nEvent) {

                    if (nEvent.target.files.length > 0) {
                        //viewModel.ForUploadFiles([]);
                        //viewModel.ForUploadFilesVM([]);
                        for (var i = 0; i < nEvent.target.files.length; i++) {
                            var file = nEvent.target.files[i];
                            //viewModel.ForUploadFiles.push(file);
                            viewModel.ForUploadFilesVM.push(new InputFile(file.name, file.size, file, event.target));
                            //viewModel.ForUploadFiles.push
                        }
                    }
                })
              
            }

            self.UploadFile = function () {
                var fd = new FormData();
                for (var i = 0; i < viewModel.ForUploadFilesVM().length; i++) {
                    var file = viewModel.ForUploadFilesVM()[i];
                    fd.append(file.FileName, file.File());
                }
                var url = uploadFileUrl + "/" + viewModel.SelectedServer().ServerName() + "/" + viewModel.SelectedApp().AppId() + "/" + viewModel.SelectedVersion().AppVersionId() + "/" + viewModel.SelectedFile().AppFileId();
                $.ajax(url,
                    {
                        data: fd,
                        method: "POST",
                        dataType: false,
                        contentType: false ,
                        processData: false,
                        statusCode: {
                            200: function (data) {
                                console.log(data);
                                //var processedText = data.responseText.replaceAll('""', '"');
                                //var parsedData = JSON.parse(processedText);
                                var parsedData = JSON.parse(data);
                                if (parsedData.Status == "Ok!") {
                                    viewModel.ForUploadFilesVM([]);
                                    alertify.success("Upload Complete! " + parsedData.Data);
                                    viewModel.SelectedVersion().SelectVersion();
                                }
                                else {
                                    alertify.error(parsedData.Data);
                                }
                            }
                        }
                    });
            }
        }

        function Version(AppVersionId, AppId, AppVersionName, isMajorRevision, Date) {
            var self = this;
            self.AppVersionId = ko.observable(AppVersionId);
            self.AppId = ko.observable(AppId);
            self.AppVersionName = ko.observable(AppVersionName);
            self.isMajorRevision = ko.observable(isMajorRevision);
            self.Date = ko.observable(Date);
            self.SelectVersion = function () {
                viewModel.SelectedVersion(self);
                GetFiles(viewModel.SelectedServer().ServerName(), viewModel.SelectedApp().AppId(), self.AppVersionId());
                viewModel.Selected("Version");
            }
            self.DeleteVersion = function () {
                alertify.confirm("Delete Version", "Are you sure you want to delete this version? " + self.AppVersionName(),
                    function () {
                        $.ajax(deleteAppVersionUrl + "/" + viewModel.SelectedServer().ServerName() + "/" + viewModel.SelectedApp().AppName() + "/" + self.AppVersionId(),
                            {
                                method: "GET",
                                dataType: "application/json",
                                statusCode: {
                                    200: function (data) {
                                        console.log(data);
                                        var processedText = data.responseText.replaceAll('""', '"');
                                        var parsedData = JSON.parse(processedText);
                                        parsedData = JSON.parse(parsedData);
                                        if (parsedData.Status == "Ok!") {
                                            alertify.success("Delete Version success! " + self.AppVersionName());
                                            viewModel.SelectedApp().SelectApp();
                                            //GetVersions(viewModel.SelectedServer().ServerName(), viewModel.SelectedApp().AppId());
                                        }
                                        else {
                                            alertify.error(parsedData.Data);
                                        }


                                    }
                                }

                            });
                    },
                    function () {
                        alertify.error("Delete version cancelled!");
                    })
            }


        }



        function App(AppId, AppName) {
            var self = this;
            self.AppId = ko.observable(AppId);
            self.AppName = ko.observable(AppName);
            self.SelectApp = function () {
                viewModel.SelectedApp(self);
                GetVersions(viewModel.SelectedServer().ServerName(), self.AppId());
                viewModel.FormAddVersion(new FormAddVersion(viewModel.SelectedServer().ServerName(), self.AppName(),"",false));
                viewModel.Selected("App");
            }
            self.DeleteApp = function () {
                alertify.confirm("Delete app", "Are you sure you want to delete this app? " + viewModel.SelectedApp().AppName(),
                    function () {
                        $.ajax(deleteAppsUrl + "/" + viewModel.SelectedServer().ServerName() + "/" + viewModel.SelectedApp().AppName(),
                            {
                                method: "GET",
                                dataType: "application/json",
                                statusCode: {
                                    200: function (data) {
                                        console.log(data);
                                        var processedText = data.responseText.replaceAll('""', '"');
                                        var parsedData = JSON.parse(processedText);
                                        parsedData = JSON.parse(parsedData);
                                        //var processedData = JSON.parse(parsedData.Data);

                                        if (parsedData.Status == "Ok!") {
                                            alertify.success("Application Deleted! : " + self.AppName());
                                            viewModel.SelectedServer().SelectServer();
                                            //GetApps(viewModel.SelectedServer().ServerName());
                                        }
                                        else {
                                            alertify.error(parsedData);
                                        }
                                    }
                                }
                            });
                    },
                    function () {
                        alertify.error("App deletion cancelled!");
                    });


            }

        }

        function Server(IPAddress, ServerName) {
            var self = this;
            self.IPAddress = ko.observable(IPAddress);
            self.ServerName = ko.observable(ServerName);
            self.SelectServer = function () {
                viewModel.SelectedServer(self);
                GetApps(self.ServerName());
                viewModel.FormAddApp(new FormAddApp(self.ServerName(), ""));
                viewModel.Selected("Server");
            }

        }

        function ViewModel() {
            var self = this;
            self.Servers = ko.observableArray();
            self.Apps = ko.observableArray();
            self.Versions = ko.observableArray();
            self.AppFiles = ko.observableArray();
            self.ProcessedFiles = ko.observableArray();
            self.SelectedFiles = ko.observableArray();
            self.SelectedFile = ko.observable();
            self.SelectedServer = ko.observable();
            self.SelectedApp = ko.observable();
            self.SelectedVersion = ko.observable();
            self.Selected = ko.observable();


            self.FormTemplate = ko.observable();
            self.FormAddApp = ko.observable();
            self.FormAddVersion = ko.observable();
            self.NewDirectory = ko.observable();

            
            self.ForUploadFilesVM = ko.observableArray();

            self.MultiSelectFilesText = ko.computed(function () {
                return "You have selected " + self.SelectedFiles().length + " file" + (self.SelectedFiles().length > 1 ? "s" : "");
            });

            self.ClientUpdate = function () {
                adHub.server.updateApp(); 
            }

            self.DeleteMultiSelectFiles = function () {
                alertify.confirm("Delete Multi-Selected Files", "Are you sure you want to delete the files?",
                    function () {
                        var ids = [];
                        for (var i = 0; i < self.SelectedFiles().length; i++) {
                            ids.push(self.SelectedFiles()[i].AppFileId());
                        }
                        $.ajax(deleteMultiSelectUrl + "/" + viewModel.SelectedServer().ServerName(),
                            {
                                method: "POST",
                                data: JSON.stringify(ids),
                                dataType: 'application/json',

                                statusCode: {
                                    200: function (data) {
                                        console.log(data);
                                        var processedText = data.responseText.replaceAll('""', '"');
                                        var parsedData = JSON.parse(processedText);
                                        parsedData = JSON.parse(parsedData);
                                        if (parsedData.Status == "Ok!") {
                                            alertify.success(parsedData.Data);
                                            viewModel.SelectedVersion().SelectVersion();
                                            self.SelectedFiles([]);
                                        }
                                        else {
                                            alertify.error(parsedData.Data);
                                        }
                                    }
                                }
                            });
                    },
                    function () {
                        alertify.error("Deletion cancelled!");
                    });
            }

            GetServers();
        }


    </script>
}

@section scripts
{
    <script type="text/javascript">
        //$(document).ready(function () {
        //    $(document).on('drop', '#area', function (e) {
        //        console.log(e);
        //    });
        //});
        $(document).ready(function () {
            adHub = $.connection.aDHub;
            $.connection.hub.start().done(function () {
                adHub.server.webJoin(location.hostname);
            });
            viewModel = new ViewModel();
            ko.applyBindings(viewModel);
        });


    </script>
}